type: edu
custom_name: stage4
files:
- name: src/phonebook/Main.kt
  visible: true
  text: |
    package phonebook

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
- name: test/PhoneBookTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class PhoneBookTest extends StageTest {

        private long timeOnTestStart;

        @Override
        public List<TestCase> generate() {
            timeOnTestStart = System.currentTimeMillis();
            return Arrays.asList(
                    new TestCase().setTimeLimit(30 * 60 * 1000)
            );
        }


        private CheckResult checkPhrases(String reply, String... phrases) {
            reply = reply.toLowerCase();
            for (String phrase : phrases) {
                if (!reply.contains(phrase.toLowerCase())) {
                    return CheckResult.wrong("Not found the part `" + phrase + "` in your output.");
                }
            }
            return CheckResult.correct();
        }

        private List<String> findAll(String reply, String regex) {
            Matcher matcher = Pattern.compile(regex).matcher(reply);
            List<String> groups = new ArrayList<>();
            while (matcher.find()) {
                groups.add(matcher.group());
            }
            return groups;
        }

        private String timeRegex = "(\\d+)\\s*min.*?(\\d+)\\s*sec.*?(\\d+)\\s*ms";
        private Pattern timeRegexPattern = Pattern.compile(timeRegex);

        private long parseTimestamp(String timestamp) {
            Matcher matcher = timeRegexPattern.matcher(timestamp);
            if (!matcher.matches() || matcher.groupCount() < 3) {
                throw new IllegalStateException("???Not matches the line " + timestamp);
            }
            int min = Integer.parseInt(matcher.group(1));
            int sec = Integer.parseInt(matcher.group(2));
            int ms = Integer.parseInt(matcher.group(3));
            return ms + sec * 1000 + min * 1000 * 60;
        }


        @Override
        public CheckResult check(String reply, Object clue) {
            long realTime = System.currentTimeMillis() - timeOnTestStart;
            reply = reply.toLowerCase();
            CheckResult res = checkPhrases(reply,
                    "found",
                    "min.",
                    "sec.",
                    "ms.",
                    "sorting time",
                    "searching time",
                    "linear search",
                    "bubble sort",
                    "jump search",
                    "quick sort",
                    "binary search",
                    "hash table",
                    "creating time"
            );
            if (!res.isCorrect()) {
                return res;
            }

            List<String> stat1 = findAll(reply, "500 / 500");
            List<String> stat2 = findAll(reply, "500/500");

            if (stat1.size() + stat2.size() < 4) {
                return CheckResult.wrong("Your output should contain 4 times the phrase `500 / 500`");
            }

            List<String> timestamps = findAll(reply, timeRegex);
            if (timestamps.size() != 10) {
                return CheckResult.wrong("Your output should contain 10 timer outputs, but found "
                        + timestamps.size());
            }
            // should not fail..
            long t1 = parseTimestamp(timestamps.get(0));
            long t2 = parseTimestamp(timestamps.get(1));
            long t3 = parseTimestamp(timestamps.get(2));
            long t4 = parseTimestamp(timestamps.get(3));
            // qsort
            long t5 = parseTimestamp(timestamps.get(4));
            long t6 = parseTimestamp(timestamps.get(5));
            long t7 = parseTimestamp(timestamps.get(6));
            // hash table
            long t8 = parseTimestamp(timestamps.get(7));
            long t9 = parseTimestamp(timestamps.get(8));
            long t10 = parseTimestamp(timestamps.get(9));

            if (Math.abs(t3 + t4 - t2) > 100) {
                return CheckResult.wrong("Your third and fourth timer outputs in total (bubble sorting and searching) " +
                        "should be equal to the second (total search time).");
            }
            if (Math.abs(t6 + t7 - t5) > 100) {
                return CheckResult.wrong("Your 6-th and 7-th timer outputs in total (qsort and searching) " +
                        "should be equal to the 5-th (total search time).");
            }
            if (Math.abs(t9 + t10 - t8) > 100) {
                return CheckResult.wrong("Your 9-th and 10-th timer outputs in total (creating hashtable and searching) " +
                        "should be equal to the 8-th (total search time).");
            }

            long estimatedTime = t1 + t2 + t5 + t8;
            if (realTime < 1000) {
                return CheckResult.wrong("Your program completes too fast. Faster than a second!");
            }

            if (Math.abs(estimatedTime - realTime) > estimatedTime * 0.3) {
                return CheckResult.wrong("Your estimated time is not similar to real time the program works. " +
                        "Real time: " + realTime + "ms, estimated time: " + estimatedTime + "ms");
            }

            if (t8 >= t5) {
                return CheckResult.wrong("Your hashtable works slower, than quick sort + binary search.");
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/phonebook/BubbleSortJumpSearch.kt
  visible: true
  text: |
    package phonebook

    import java.io.File

    class BubbleSortJumpSearch(directoryFile: File,
                               searchItemsFile: File,
                               val linearSearchTiming: Long = 0L): Search() {

        var bubbleSortTime: Long = 0L
            get() = field

        var totalTime: Long = 0L
            get() = field

        var sortingTimeMessage = ""
            get() = field

        var searchingTimeMessage = ""
            get() = field

        init {

            val lines = directoryFile.readLines().toMutableList()
            val searchItems = searchItemsFile.readLines()

            if (bubbleSort(lines)) {
                search(lines, searchItems, SearchType.JUMP_SEARCH)

                sortingTimeMessage = "Sorting time: ${timingMessage(bubbleSortTime)}"
                searchingTimeMessage = "Searching time: ${timingMessage(searchTime)}"
            } else {

                search(lines, searchItems, SearchType.LINEAR_SEARCH)
                sortingTimeMessage = "Sorting time: ${timingMessage(bubbleSortTime)} - STOPPED, moved to linear search"
                searchingTimeMessage = "Searching time: ${timingMessage(searchTime)}"
            }

            totalTime = bubbleSortTime + searchTime
            println(statusMessage(foundCount, searchItems.size, totalTime))
            println(sortingTimeMessage)
            println(searchingTimeMessage)
        }

        private fun bubbleSort(a: MutableList<String>): Boolean {
            val timeLimit = linearSearchTiming * 10
            val startTime = System.currentTimeMillis()
            for (i in (a.size - 1) downTo 0) {
                var swapped = false
                for (j in 0 until i) {
                    if (a[j].substringAfter(" ") > a[j + 1].substringAfter(" ")) {
                        a[j] = a[j + 1].also { a[j + 1] = a[j] }
                        swapped = true
                    }
                }
                bubbleSortTime = System.currentTimeMillis() - startTime
                if (bubbleSortTime > timeLimit) return false
                if (!swapped) break
            }
            return true
        }
    }
  learner_created: true
- name: src/phonebook/LinearSearch.kt
  visible: true
  text: |
    package phonebook

    import java.io.File

    class LinearSearch(directoryFile: File, searchItemsFile: File): Search() {

        init {
            val lines = directoryFile.readLines()
            val searchItems = searchItemsFile.readLines()

            search(lines, searchItems, SearchType.LINEAR_SEARCH)
            println(statusMessage(foundCount, searchItems.size, searchTime))
        }
    }
  learner_created: true
- name: src/phonebook/QuickSortBinarySearch.kt
  visible: true
  text: |-
    package phonebook

    import java.io.File

    class QuickSortBinarySearch(
        directoryFile: File,
        searchItemsFile: File,
        val linearSearchTiming: Long = 0L
    ) : Search() {

        var quickSortTime: Long = 0L
            get() = field

        var totalTime: Long = 0L
            get() = field

        var sortingTimeMessage = ""
            get() = field

        var searchingTimeMessage = ""
            get() = field

        init {

            val lines = directoryFile.readLines().toMutableList()
            val searchItems = searchItemsFile.readLines()

            val timeLimit = linearSearchTiming * 10
            val startTime = System.currentTimeMillis()
            quick(lines)
            search(lines, searchItems, SearchType.BINARY_SEARCH)
            quickSortTime = System.currentTimeMillis() - startTime
            sortingTimeMessage = "Sorting time: ${timingMessage(quickSortTime)}"
            searchingTimeMessage = "Searching time: ${timingMessage(searchTime)}"
            totalTime = quickSortTime + searchTime

            println(statusMessage(foundCount, searchItems.size, totalTime))
            println(sortingTimeMessage)
            println(searchingTimeMessage)
        }

        fun exch(a: MutableList<String>, i: Int, j: Int) {
            a[i] = a[j].also { a[j] = a[i] }
        }

        fun quick(a: MutableList<String>, lo: Int = 0, hi: Int = a.size - 1) {
            if (hi <= lo) return
            var lt = lo
            var i = lo + 1
            var gt = hi
            val v = a[lo]
            while (i <= gt) {
                val cmp = a[i].substringAfter(" ").compareTo(v.substringAfter(" "))
                if (cmp < 0) exch(a, lt++, i++) else if (cmp > 0) exch(a, i, gt--) else i++
            } // Now a[lo..lt-1] < v = a[lt..gt] < a[gt+1..hi].
            quick(a, lo, lt - 1)
            quick(a, gt + 1, hi)
        }
    }
  learner_created: true
- name: src/phonebook/Search.kt
  visible: true
  text: |-
    package phonebook

    import kotlin.math.floor
    import kotlin.math.max
    import kotlin.math.min
    import kotlin.math.sqrt

    abstract class Search {

        enum class SearchType {
            LINEAR_SEARCH, JUMP_SEARCH, BINARY_SEARCH;
        }

        var searchTime: Long = 0L
    //        get() = field

        var foundCount = 0
    //        get() = field

        fun search(lines: List<String>, searchItems: List<String>, searchType: SearchType) {
            val startTime = System.currentTimeMillis()
            for (item in searchItems) {
                when (searchType) {
                    SearchType.LINEAR_SEARCH -> linearSearch(item, lines)
                    SearchType.JUMP_SEARCH -> {
                        val index = jumpSearch(item, lines)
                        if (index != -1)
                            foundCount++
                    }
                    SearchType.BINARY_SEARCH -> {
                        val index = binarySearch(item, lines)
                        if (index != -1)
                            foundCount++
                    }
                }
            }

            val endTime = System.currentTimeMillis()
            searchTime = endTime - startTime
        }

        fun linearSearch(item: String, lines: List<String>): Boolean {
            for (line in lines) {
                if (item == line.substringAfter(' ')) {
                    foundCount++
                    return true
                }
            }
            return false
        }

        fun jumpSearch(item: String, arr: List<String>, left: Int = 0, right: Int = arr.size - 1): Int {
            val step = floor(sqrt(right - left + 1.0)).toInt()
            var lleft: Int = left
            var lright: Int = min(lleft + step - 1, right)

            if (right - left + 1 <= 1) {
                return if (item == arr[lleft].substringAfter(" "))
                    lleft
                else -1
            }
            while (lleft <= right) {

                if (item == arr[lleft].substringAfter(" "))
                    return lleft
                if (item < arr[lright].substringAfter(" "))
                    return jumpSearch(item, arr, max(0, lleft - step), max(0, lleft - 1))
                if (lleft == right) break
                lleft = min(lleft + step, right)
                lright = min(lleft + step - 1, right)
            }
            return -1
        }

        fun binarySearch(item: String, arr: List<String>, left: Int = 0, right: Int = arr.size - 1): Int {
            val mid = (left + right) / 2
            return if (item == arr[mid].substringAfter(" "))
                mid
            else if (item < arr[mid].substringAfter(" "))
                binarySearch(item, arr, left, mid - 1)
            else if (item > arr[mid].substringAfter(" "))
                binarySearch(item, arr, mid + 1, right)
            else
                -1
        }
    }
  learner_created: true
- name: src/phonebook/PhoneBook.kt
  visible: true
  learner_created: true
- name: src/phonebook/Sort.kt
  visible: true
  learner_created: true
- name: src/phonebook/Timing.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/86/stages/479/implement#comment
status: Unchecked
record: -1
