type: edu
custom_name: stage3
files:
- name: src/phonebook/Main.kt
  visible: true
  text: |
    package phonebook

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
- name: test/PhoneBookTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nimport java.util.regex.Matcher;\n\
    import java.util.regex.Pattern;\n\npublic class PhoneBookTest extends StageTest\
    \ {\n\n    private long timeOnTestStart;\n    \n    @Override\n    public List<TestCase>\
    \ generate() {\n        timeOnTestStart = System.currentTimeMillis();\n      \
    \  return Arrays.asList(\n                new TestCase().setTimeLimit(30 * 60\
    \ * 1000)\n        );\n    }\n    \n    private CheckResult checkPhrases(String\
    \ reply, String... phrases) {\n        reply = reply.toLowerCase();\n        for\
    \ (String phrase : phrases) {\n            if (!reply.contains(phrase.toLowerCase()))\
    \ {\n                return CheckResult.wrong(\"Not found the part `\" + phrase\
    \ + \"` in your output.\");\n            }\n        }\n        return CheckResult.correct();\n\
    \    }\n    \n    private List<String> findAll(String reply, String regex) {\n\
    \        Matcher matcher = Pattern.compile(regex).matcher(reply);\n        List<String>\
    \ groups = new ArrayList<>();\n        while (matcher.find()) {\n            groups.add(matcher.group());\n\
    \        }\n        return groups;\n    }\n    \n    private String timeRegex\
    \ = \"(\\\\d+)\\\\s*min.*?(\\\\d+)\\\\s*sec.*?(\\\\d+)\\\\s*ms\";\n    private\
    \ Pattern timeRegexPattern = Pattern.compile(timeRegex);\n    \n    private long\
    \ parseTimestamp(String timestamp) {\n        Matcher matcher = timeRegexPattern.matcher(timestamp);\n\
    \        if (!matcher.matches() || matcher.groupCount() < 3) {\n            throw\
    \ new IllegalStateException(\"???Not matches the line \" + timestamp);\n     \
    \   }\n        int min = Integer.parseInt(matcher.group(1));\n        int sec\
    \ = Integer.parseInt(matcher.group(2));\n        int ms = Integer.parseInt(matcher.group(3));\n\
    \        return ms + sec * 1000 + min * 1000 * 60;\n    }\n    \n    @Override\n\
    \    public CheckResult check(String reply, Object clue) {\n        long realTime\
    \ = System.currentTimeMillis() - timeOnTestStart;\n        \n        reply = reply.toLowerCase();\n\
    \        \n        CheckResult res = checkPhrases(reply,\n                \"found\"\
    ,\n                \"min.\",\n                \"sec.\",\n                \"ms.\"\
    ,\n                \"sorting time\",\n                \"searching time\",\n  \
    \              \"linear search\",\n                \"bubble sort\",\n        \
    \        \"jump search\",\n                \"quick sort\",\n                \"\
    binary search\"\n        );\n        if (!res.isCorrect()) {\n            return\
    \ res;\n        }\n        \n        List<String> stat1 = findAll(reply, \"500\
    \ / 500\");\n        List<String> stat2 = findAll(reply, \"500/500\");\n     \
    \   \n        if (stat1.size() + stat2.size() < 3) {\n            return CheckResult.wrong(\"\
    Your output should contain 3 times the phrase `500 / 500`\");\n        }\n   \
    \     \n        List<String> timestamps = findAll(reply, timeRegex);\n       \
    \ if (timestamps.size() != 7) {\n            return CheckResult.wrong(\"Your output\
    \ should contain 7 timer outputs, but found \"\n                    + timestamps.size());\n\
    \        }\n        // should not fail..\n        long t1 = parseTimestamp(timestamps.get(0));\n\
    \        long t2 = parseTimestamp(timestamps.get(1));\n        long t3 = parseTimestamp(timestamps.get(2));\n\
    \        long t4 = parseTimestamp(timestamps.get(3));\n        long t5 = parseTimestamp(timestamps.get(4));\n\
    \        long t6 = parseTimestamp(timestamps.get(5));\n        long t7 = parseTimestamp(timestamps.get(6));\n\
    \        \n        if (Math.abs(t3 + t4 - t2) > 100) {\n            return CheckResult.wrong(\"\
    Your third and fourth timer outputs in total (sorting and searching) \" +\n  \
    \                  \"should be equal to the second (total search time).\");\n\
    \        }\n        if (Math.abs(t6 + t7 - t5) > 100) {\n            return CheckResult.wrong(\"\
    Your 6-th and 7-th timer outputs in total (sorting and searching) \" +\n     \
    \               \"should be equal to the 5-th (total search time).\");\n     \
    \   }\n        \n        long estimatedTime = t1 + t2 + t5;\n        if (realTime\
    \ < 1000) {\n            return CheckResult.wrong(\"Your program completes too\
    \ fast. Faster than a second!\");\n        }\n        \n        if (Math.abs(estimatedTime\
    \ - realTime) > estimatedTime * 0.3) {\n            return CheckResult.wrong(\"\
    Your estimated time is not similar to real time the program works. \" +\n    \
    \                \"Real time: \" + realTime + \"ms, estimated time: \" + estimatedTime\
    \ + \"ms\");\n        }\n        \n        return CheckResult.correct();\n   \
    \ }\n}\n"
  learner_created: false
- name: src/phonebook/BubbleSortJumpSearch.kt
  visible: true
  text: |
    package phonebook

    import java.io.File

    class BubbleSortJumpSearch(directoryFile: File,
                               searchItemsFile: File,
                               val linearSearchTiming: Long = 0L): Search() {

        var bubbleSortTime: Long = 0L
            get() = field

        var sortingTimeMessage = ""
            get() = field

        var searchingTimeMessage = ""
            get() = field

        init {

            val lines = directoryFile.readLines().toMutableList()
            val searchItems = searchItemsFile.readLines()

            if (bubbleSort(lines)) {
                search(lines, searchItems, SearchType.JUMP_SEARCH)

                sortingTimeMessage = "Sorting time: ${timingMessage(bubbleSortTime)}"
                searchingTimeMessage = "Searching time: ${timingMessage(searchTime)}"
            } else {

                search(lines, searchItems, SearchType.LINEAR_SEARCH)
                sortingTimeMessage = "Sorting time: ${timingMessage(bubbleSortTime)} - STOPPED, moved to linear search"
                searchingTimeMessage = "Searching time: ${timingMessage(searchTime)}"
            }

            println(statusMessage(foundCount, searchItems.size, searchTime))
            println(sortingTimeMessage)
            println(searchingTimeMessage)
        }

        private fun bubbleSort(a: MutableList<String>): Boolean {
            val timeLimit = linearSearchTiming * 10
            val startTime = System.currentTimeMillis()
            for (i in (a.size - 1) downTo 0) {
                var swapped = false
                for (j in 0 until i) {
                    if (a[j].substringAfter(" ") > a[j + 1].substringAfter(" ")) {
                        a[j] = a[j + 1].also { a[j + 1] = a[j] }
                        swapped = true
                    }
                }
                bubbleSortTime = System.currentTimeMillis() - startTime
                if (bubbleSortTime > timeLimit) return false
                if (!swapped) break
            }
            return true
        }
    }
  learner_created: true
- name: src/phonebook/LinearSearch.kt
  visible: true
  text: |
    package phonebook

    import java.io.File

    class LinearSearch(directoryFile: File, searchItemsFile: File): Search() {

        init {
            val lines = directoryFile.readLines()
            val searchItems = searchItemsFile.readLines()

            search(lines, searchItems, SearchType.LINEAR_SEARCH)
            println(statusMessage(foundCount, searchItems.size, searchTime))
        }
    }
  learner_created: true
- name: src/phonebook/QuickSortBinarySearch.kt
  visible: true
  text: |-
    package phonebook

    import java.io.File

    class QuickSortBinarySearch(
        directoryFile: File,
        searchItemsFile: File,
        val linearSearchTiming: Long = 0L
    ) : Search() {
        var bubbleSortTime: Long = 0L
            get() = field

        var sortingTimeMessage = ""
            get() = field

        var searchingTimeMessage = ""
            get() = field

        init {

            val lines = directoryFile.readLines().toMutableList()
            val searchItems = searchItemsFile.readLines()

            if (QuickSort(lines)) {
                search(lines, searchItems, SearchType.JUMP_SEARCH)

                sortingTimeMessage = "Sorting time: ${timingMessage(bubbleSortTime)}"
                searchingTimeMessage = "Searching time: ${timingMessage(searchTime)}"
            } else {

                search(lines, searchItems, SearchType.LINEAR_SEARCH)
                sortingTimeMessage = "Sorting time: ${timingMessage(bubbleSortTime)}" +
                        " - STOPPED, moved to linear search"
                searchingTimeMessage = "Searching time: ${timingMessage(searchTime)}"
            }

            println(statusMessage(foundCount, searchItems.size, searchTime))
            println(sortingTimeMessage)
            println(searchingTimeMessage)
        }

        fun QuickSort(a: MutableList<String>): Boolean {
            return true
        }
    }
  learner_created: true
- name: src/phonebook/Search.kt
  visible: true
  text: |-
    package phonebook

    import kotlin.math.floor
    import kotlin.math.max
    import kotlin.math.min
    import kotlin.math.sqrt

    abstract class Search {

        enum class SearchType {
            LINEAR_SEARCH, JUMP_SEARCH, BINARY_SEARCH;
        }

        var searchTime: Long = 0L
    //        get() = field

        var foundCount = 0
    //        get() = field

        fun search(lines: List<String>, searchItems: List<String>, searchType: SearchType) {
            val startTime = System.currentTimeMillis()
            for (item in searchItems) {
                when (searchType) {
                    SearchType.LINEAR_SEARCH -> linearSearch(item, lines)
                    SearchType.JUMP_SEARCH -> {
                        val index = jumpSearch(item, lines)
                        if (index != -1)
                            foundCount++
                    }
                    SearchType.BINARY_SEARCH -> {
                        val index = binarySearch(item, lines)
                        if (index != -1)
                            foundCount++
                    }
                }
            }

            val endTime = System.currentTimeMillis()
            searchTime = endTime - startTime
        }

        fun linearSearch(item: String, lines: List<String>): Boolean {
            for (line in lines) {
                if (item == line.substringAfter(' ')) {
                    foundCount++
                    return true
                }
            }
            return false
        }

        fun jumpSearch(item: String, arr: List<String>, left: Int = 0, right: Int = arr.size - 1): Int {
            val step = floor(sqrt(right - left + 1.0)).toInt()
            var lleft: Int = left
            var lright: Int = min(lleft + step - 1, right)

            if (right - left + 1 <= 1) {
                return if (item == arr[lleft].substringAfter(" "))
                    lleft
                else -1
            }
            while (lleft <= right) {

                if (item == arr[lleft].substringAfter(" "))
                    return lleft
                if (item < arr[lright].substringAfter(" "))
                    return jumpSearch(item, arr, max(0, lleft - step), max(0, lleft - 1))
                if (lleft == right) break
                lleft = min(lleft + step, right)
                lright = min(lleft + step - 1, right)
            }
            return -1
        }

        fun binarySearch(item: String, arr: List<String>, left: Int = 0, right: Int = arr.size - 1): Int {
            val mid = (left + right) / 2
            return if (item == arr[mid].substringAfter(" "))
                mid
            else if (item < arr[mid].substringAfter(" "))
                binarySearch(item, arr, left, mid - 1)
            else if (item > arr[mid].substringAfter(" "))
                binarySearch(item, arr, mid + 1, right)
            else
                -1
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/86/stages/478/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 13 Feb 2021 12:33:48 UTC
record: 3
